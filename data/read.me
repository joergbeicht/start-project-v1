1. Git Repository erstellen
>: git init

2. Working with Commits (Code Snapshots)
>: git add index.html
>: git add .  // alle Files im Projekt
>: git add *  // das gleiche wie . alle Files im Projekt
>: git add folder_name  // alles im Folder und SubFolders
>: git commit index.html is added
>: git add one-more.html demo.txt
>: git commit one-more.html and demo.txt is added
>: git status
>: git log "liefert die id's für einen checkout eines Snapshots
>: git checkout
>: git revert // zurück drehen
>: git reset --hard id // bringt den SnapShot auf den Stand bis id zurück, die id kann mit git log gefunden werden

3. Understanding Branches
>: git branch feature-branch-1 // erstellt einen branch
>: git branch  // listet alle branches
>: git checkout feature-branch-1  // wechselt auf den branch.. mit git log prüfen
>: git branch -D feature-branch-1 // löscht den branch
>: git checkout -b feature-branch-1 // ist zwei in eins -> erstellt einen neuen branch und macht dirket einen checkout
>: git merge // Vorgehen -> 
   1. Fall: main hat einen Fix bekommen und feature-brunch-1 ist fertig
            - Annahme: wir stehen in feature-brunch-1 => git checkout feature-branch-1
            - git merge main => main Fix wird in feature-brunch-1 gemerged;
            - git checkout main => jetzt erst Wechsel auf main; du steht auf main
            - git merge feature-brunch-1 => jetzt hat main den neuen vollständigen stand
            - git branch -D feature-branch-1 => Feature Branch löschen
    => Das machst du um den main nicht versehentlich zu zerstören
    2. Fall: main hat keine Fix
            - git checkout main => direkt Wechsel auf main; du steht auf main
            - git merge feature-brunch-1 => jetzt hat main den neuen vollständigen stand
            - git branch -D feature-branch-1 => Feature Branch löschen

4. GitHub
    Ein bestehendes Repository einem bestehenden localen git hinzufügen
    // git remote add irgendein_name url // meist wird origin benutzt! irgendein_name ist der lokale identifier
    >: git remote add origin https://github.com/joergbeicht/start-project-v1.git
    // push von local main brunch namens origin to remote brunch namens main
    // main wird gleichzeitig erstellt falls nicht vorhanden
    >: git push origin main
    // bei fehlenden zugriffs-rechten dein-git-name@ ergänzen
    // und als passwort einen token erstellen unter settings in github -> lektion 24 
    >: git remote set-url origin https://dein-git-name@github.com/joergbeicht/start-project-v1.git
    >: git push --set-upstream origin main

5. Mit einem Feature oder ein BugFix arbeiten
    >: git checkout -b feat-section


Was ist Stage (ein wichtiger Begriff!)
======================================
Nach einem commit ist/sind die neuen oder atualisierten Dateien stage!

Hinweise:
git add, status und commit muss jedesmal ausgeführt werden. Sonst ist die Datei index.html NICHT staged!
